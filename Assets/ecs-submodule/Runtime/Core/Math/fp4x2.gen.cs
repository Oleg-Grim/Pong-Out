//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Runtime.CompilerServices;
using static Unity.Mathematics.math;
using Unity.Mathematics;

#pragma warning disable 0660, 0661

namespace ME.ECS
{
    [System.Serializable]
    public partial struct fp4x2 : System.IEquatable<fp4x2>, IFormattable
    {
        public fp4 c0;
        public fp4 c1;

        /// <summary>fp4x2 zero value.</summary>
        public static readonly fp4x2 zero;

        /// <summary>Constructs a fp4x2 matrix from two fp4 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp4x2(fp4 c0, fp4 c1)
        { 
            this.c0 = c0;
            this.c1 = c1;
        }

        /// <summary>Constructs a fp4x2 matrix from 8 fp values given in row-major order.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp4x2(fp m00, fp m01,
                     fp m10, fp m11,
                     fp m20, fp m21,
                     fp m30, fp m31)
        { 
            this.c0 = new fp4(m00, m10, m20, m30);
            this.c1 = new fp4(m01, m11, m21, m31);
        }

        /// <summary>Constructs a fp4x2 matrix from a single fp value by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp4x2(fp v)
        {
            this.c0 = v;
            this.c1 = v;
        }

        /// <summary>Constructs a fp4x2 matrix from a single int value by converting it to fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp4x2(int v)
        {
            this.c0 = (fp4)v;
            this.c1 = (fp4)v;
        }

        /// <summary>Constructs a fp4x2 matrix from a int4x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp4x2(int4x2 v)
        {
            this.c0 = (fp4)v.c0;
            this.c1 = (fp4)v.c1;
        }

        /// <summary>Constructs a fp4x2 matrix from a single uint value by converting it to fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp4x2(uint v)
        {
            this.c0 = (fp4)v;
            this.c1 = (fp4)v;
        }

        /// <summary>Constructs a fp4x2 matrix from a uint4x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public fp4x2(uint4x2 v)
        {
            this.c0 = (fp4)v.c0;
            this.c1 = (fp4)v.c1;
        }


        /// <summary>Implicitly converts a single fp value to a fp4x2 matrix by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static implicit operator fp4x2(fp v) { return new fp4x2(v); }

        /// <summary>Explicitly converts a single int value to a fp4x2 matrix by converting it to fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator fp4x2(int v) { return new fp4x2(v); }

        /// <summary>Explicitly converts a int4x2 matrix to a fp4x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator fp4x2(int4x2 v) { return new fp4x2(v); }

        /// <summary>Explicitly converts a single uint value to a fp4x2 matrix by converting it to fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator fp4x2(uint v) { return new fp4x2(v); }

        /// <summary>Explicitly converts a uint4x2 matrix to a fp4x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator fp4x2(uint4x2 v) { return new fp4x2(v); }


        /// <summary>Returns the result of a componentwise multiplication operation on two fp4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 operator * (fp4x2 lhs, fp4x2 rhs) { return new fp4x2 (lhs.c0 * rhs.c0, lhs.c1 * rhs.c1); }

        /// <summary>Returns the result of a componentwise multiplication operation on a fp4x2 matrix and a fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 operator * (fp4x2 lhs, fp rhs) { return new fp4x2 (lhs.c0 * rhs, lhs.c1 * rhs); }

        /// <summary>Returns the result of a componentwise multiplication operation on a fp value and a fp4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 operator * (fp lhs, fp4x2 rhs) { return new fp4x2 (lhs * rhs.c0, lhs * rhs.c1); }


        /// <summary>Returns the result of a componentwise addition operation on two fp4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 operator + (fp4x2 lhs, fp4x2 rhs) { return new fp4x2 (lhs.c0 + rhs.c0, lhs.c1 + rhs.c1); }

        /// <summary>Returns the result of a componentwise addition operation on a fp4x2 matrix and a fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 operator + (fp4x2 lhs, fp rhs) { return new fp4x2 (lhs.c0 + rhs, lhs.c1 + rhs); }

        /// <summary>Returns the result of a componentwise addition operation on a fp value and a fp4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 operator + (fp lhs, fp4x2 rhs) { return new fp4x2 (lhs + rhs.c0, lhs + rhs.c1); }


        /// <summary>Returns the result of a componentwise subtraction operation on two fp4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 operator - (fp4x2 lhs, fp4x2 rhs) { return new fp4x2 (lhs.c0 - rhs.c0, lhs.c1 - rhs.c1); }

        /// <summary>Returns the result of a componentwise subtraction operation on a fp4x2 matrix and a fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 operator - (fp4x2 lhs, fp rhs) { return new fp4x2 (lhs.c0 - rhs, lhs.c1 - rhs); }

        /// <summary>Returns the result of a componentwise subtraction operation on a fp value and a fp4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 operator - (fp lhs, fp4x2 rhs) { return new fp4x2 (lhs - rhs.c0, lhs - rhs.c1); }


        /// <summary>Returns the result of a componentwise division operation on two fp4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 operator / (fp4x2 lhs, fp4x2 rhs) { return new fp4x2 (lhs.c0 / rhs.c0, lhs.c1 / rhs.c1); }

        /// <summary>Returns the result of a componentwise division operation on a fp4x2 matrix and a fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 operator / (fp4x2 lhs, fp rhs) { return new fp4x2 (lhs.c0 / rhs, lhs.c1 / rhs); }

        /// <summary>Returns the result of a componentwise division operation on a fp value and a fp4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 operator / (fp lhs, fp4x2 rhs) { return new fp4x2 (lhs / rhs.c0, lhs / rhs.c1); }


        /// <summary>Returns the result of a componentwise modulus operation on two fp4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 operator % (fp4x2 lhs, fp4x2 rhs) { return new fp4x2 (lhs.c0 % rhs.c0, lhs.c1 % rhs.c1); }

        /// <summary>Returns the result of a componentwise modulus operation on a fp4x2 matrix and a fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 operator % (fp4x2 lhs, fp rhs) { return new fp4x2 (lhs.c0 % rhs, lhs.c1 % rhs); }

        /// <summary>Returns the result of a componentwise modulus operation on a fp value and a fp4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 operator % (fp lhs, fp4x2 rhs) { return new fp4x2 (lhs % rhs.c0, lhs % rhs.c1); }


        /// <summary>Returns the result of a componentwise increment operation on a fp4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 operator ++ (fp4x2 val) { return new fp4x2 (++val.c0, ++val.c1); }


        /// <summary>Returns the result of a componentwise decrement operation on a fp4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 operator -- (fp4x2 val) { return new fp4x2 (--val.c0, --val.c1); }


        /// <summary>Returns the result of a componentwise less than operation on two fp4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator < (fp4x2 lhs, fp4x2 rhs) { return new bool4x2 (lhs.c0 < rhs.c0, lhs.c1 < rhs.c1); }

        /// <summary>Returns the result of a componentwise less than operation on a fp4x2 matrix and a fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator < (fp4x2 lhs, fp rhs) { return new bool4x2 (lhs.c0 < rhs, lhs.c1 < rhs); }

        /// <summary>Returns the result of a componentwise less than operation on a fp value and a fp4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator < (fp lhs, fp4x2 rhs) { return new bool4x2 (lhs < rhs.c0, lhs < rhs.c1); }


        /// <summary>Returns the result of a componentwise less or equal operation on two fp4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator <= (fp4x2 lhs, fp4x2 rhs) { return new bool4x2 (lhs.c0 <= rhs.c0, lhs.c1 <= rhs.c1); }

        /// <summary>Returns the result of a componentwise less or equal operation on a fp4x2 matrix and a fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator <= (fp4x2 lhs, fp rhs) { return new bool4x2 (lhs.c0 <= rhs, lhs.c1 <= rhs); }

        /// <summary>Returns the result of a componentwise less or equal operation on a fp value and a fp4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator <= (fp lhs, fp4x2 rhs) { return new bool4x2 (lhs <= rhs.c0, lhs <= rhs.c1); }


        /// <summary>Returns the result of a componentwise greater than operation on two fp4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator > (fp4x2 lhs, fp4x2 rhs) { return new bool4x2 (lhs.c0 > rhs.c0, lhs.c1 > rhs.c1); }

        /// <summary>Returns the result of a componentwise greater than operation on a fp4x2 matrix and a fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator > (fp4x2 lhs, fp rhs) { return new bool4x2 (lhs.c0 > rhs, lhs.c1 > rhs); }

        /// <summary>Returns the result of a componentwise greater than operation on a fp value and a fp4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator > (fp lhs, fp4x2 rhs) { return new bool4x2 (lhs > rhs.c0, lhs > rhs.c1); }


        /// <summary>Returns the result of a componentwise greater or equal operation on two fp4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator >= (fp4x2 lhs, fp4x2 rhs) { return new bool4x2 (lhs.c0 >= rhs.c0, lhs.c1 >= rhs.c1); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a fp4x2 matrix and a fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator >= (fp4x2 lhs, fp rhs) { return new bool4x2 (lhs.c0 >= rhs, lhs.c1 >= rhs); }

        /// <summary>Returns the result of a componentwise greater or equal operation on a fp value and a fp4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator >= (fp lhs, fp4x2 rhs) { return new bool4x2 (lhs >= rhs.c0, lhs >= rhs.c1); }


        /// <summary>Returns the result of a componentwise unary minus operation on a fp4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 operator - (fp4x2 val) { return new fp4x2 (-val.c0, -val.c1); }


        /// <summary>Returns the result of a componentwise unary plus operation on a fp4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 operator + (fp4x2 val) { return new fp4x2 (+val.c0, +val.c1); }


        /// <summary>Returns the result of a componentwise equality operation on two fp4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator == (fp4x2 lhs, fp4x2 rhs) { return new bool4x2 (lhs.c0 == rhs.c0, lhs.c1 == rhs.c1); }

        /// <summary>Returns the result of a componentwise equality operation on a fp4x2 matrix and a fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator == (fp4x2 lhs, fp rhs) { return new bool4x2 (lhs.c0 == rhs, lhs.c1 == rhs); }

        /// <summary>Returns the result of a componentwise equality operation on a fp value and a fp4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator == (fp lhs, fp4x2 rhs) { return new bool4x2 (lhs == rhs.c0, lhs == rhs.c1); }


        /// <summary>Returns the result of a componentwise not equal operation on two fp4x2 matrices.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator != (fp4x2 lhs, fp4x2 rhs) { return new bool4x2 (lhs.c0 != rhs.c0, lhs.c1 != rhs.c1); }

        /// <summary>Returns the result of a componentwise not equal operation on a fp4x2 matrix and a fp value.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator != (fp4x2 lhs, fp rhs) { return new bool4x2 (lhs.c0 != rhs, lhs.c1 != rhs); }

        /// <summary>Returns the result of a componentwise not equal operation on a fp value and a fp4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool4x2 operator != (fp lhs, fp4x2 rhs) { return new bool4x2 (lhs != rhs.c0, lhs != rhs.c1); }



        /// <summary>Returns the fp4 element at a specified index.</summary>
        unsafe public ref fp4 this[int index]
        {
            get
            {
#if ENABLE_UNITY_COLLECTIONS_CHECKS
                if ((uint)index >= 2)
                    throw new System.ArgumentException("index must be between[0...1]");
#endif
                fixed (fp4x2* array = &this) { return ref ((fp4*)array)[index]; }
            }
        }

        /// <summary>Returns true if the fp4x2 is equal to a given fp4x2, false otherwise.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public bool Equals(fp4x2 rhs) { return c0.Equals(rhs.c0) && c1.Equals(rhs.c1); }

        /// <summary>Returns true if the fp4x2 is equal to a given fp4x2, false otherwise.</summary>
        public override bool Equals(object o) { return Equals((fp4x2)o); }


        /// <summary>Returns a hash code for the fp4x2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override int GetHashCode() { return (int)fpmath.hash(this); }


        /// <summary>Returns a string representation of the fp4x2.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public override string ToString()
        {
            return string.Format("fp4x2({0}, {1},  {2}, {3},  {4}, {5},  {6}, {7})", c0.x, c1.x, c0.y, c1.y, c0.z, c1.z, c0.w, c1.w);
        }

        /// <summary>Returns a string representation of the fp4x2 using a specified format and culture-specific format information.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public string ToString(string format, IFormatProvider formatProvider)
        {
            return string.Format("fp4x2({0}, {1},  {2}, {3},  {4}, {5},  {6}, {7})", c0.x.ToString(format, formatProvider), c1.x.ToString(format, formatProvider), c0.y.ToString(format, formatProvider), c1.y.ToString(format, formatProvider), c0.z.ToString(format, formatProvider), c1.z.ToString(format, formatProvider), c0.w.ToString(format, formatProvider), c1.w.ToString(format, formatProvider));
        }

    }

    public static partial class fpmath
    {
        /// <summary>Returns a fp4x2 matrix constructed from two fp4 vectors.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 fp4x2(fp4 c0, fp4 c1) { return new fp4x2(c0, c1); }

        /// <summary>Returns a fp4x2 matrix constructed from from 8 fp values given in row-major order.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 fp4x2(fp m00, fp m01,
                                  fp m10, fp m11,
                                  fp m20, fp m21,
                                  fp m30, fp m31)
        {
            return new fp4x2(m00, m01,
                             m10, m11,
                             m20, m21,
                             m30, m31);
        }

        /// <summary>Returns a fp4x2 matrix constructed from a single fp value by assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 fp4x2(fp v) { return new fp4x2(v); }

        /// <summary>Returns a fp4x2 matrix constructed from a single int value by converting it to fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 fp4x2(int v) { return new fp4x2(v); }

        /// <summary>Return a fp4x2 matrix constructed from a int4x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 fp4x2(int4x2 v) { return new fp4x2(v); }

        /// <summary>Returns a fp4x2 matrix constructed from a single uint value by converting it to fp and assigning it to every component.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 fp4x2(uint v) { return new fp4x2(v); }

        /// <summary>Return a fp4x2 matrix constructed from a uint4x2 matrix by componentwise conversion.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp4x2 fp4x2(uint4x2 v) { return new fp4x2(v); }

        /// <summary>Return the fp2x4 transpose of a fp4x2 matrix.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static fp2x4 transpose(fp4x2 v)
        {
            return fp2x4(
                v.c0.x, v.c0.y, v.c0.z, v.c0.w,
                v.c1.x, v.c1.y, v.c1.z, v.c1.w);
        }

        /// <summary>Returns a uint hash code of a fp4x2 vector.</summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint hash(fp4x2 v)
        {
            return math.csum(fpmath.asuint(v.c0) * uint4(0xE121E6ADu, 0xC9CA1249u, 0x69B60C81u, 0xE0EB6C25u) + 
                        fpmath.asuint(v.c1) * uint4(0xF648BEABu, 0x6BDB2B07u, 0xEF63C699u, 0x9001903Fu)) + 0xA895B9CDu;
        }

        /// <summary>
        /// Returns a uint4 vector hash code of a fp4x2 vector.
        /// When multiple elements are to be hashes together, it can more efficient to calculate and combine wide hash
        /// that are only reduced to a narrow uint hash at the very end instead of at every step.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static uint4 hashwide(fp4x2 v)
        {
            return (fpmath.asuint(v.c0) * uint4(0x9D23B201u, 0x4B01D3E1u, 0x7461CA0Du, 0x79725379u) + 
                    fpmath.asuint(v.c1) * uint4(0xD6258E5Bu, 0xEE390C97u, 0x9C8A2F05u, 0x4DDC6509u)) + 0x7CF083CBu;
        }

    }
}
