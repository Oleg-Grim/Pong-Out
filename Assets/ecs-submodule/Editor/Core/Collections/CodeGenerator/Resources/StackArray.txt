namespace ME.ECS.Collections.StackArray {

    using System;
    using System.Runtime.CompilerServices;
    
    #pragma warning disable
    #CONTENT#
    #pragma warning restore

}

namespace ME.ECS.Collections {
    
    #pragma warning disable
    
    using ME.ECS.Collections.StackArray;
    using Unity.Collections.LowLevel.Unsafe;
    using System.Runtime.CompilerServices;
    
    public interface IStackArray {

        int Length { get; }
        object this[int index] { get; set; }
        void Resize(int newLength);

    }

    internal static class H {

        [MethodImpl(256)]
        public static unsafe T R<T, TT>(ref TT t, int i) where TT : struct {
            
            return UnsafeUtility.ReadArrayElement<T>(UnsafeUtility.AddressOf(ref t), i);
            
        }

        [MethodImpl(256)]
        public static unsafe void W<T, TT>(ref TT t, int i, T value) where TT : struct {
            
            UnsafeUtility.WriteArrayElement(UnsafeUtility.AddressOf(ref t), i, value);
            
        }

    }

    #STRUCTS#

    [System.Serializable]
    public struct StackArray<T> : IStackArray where T : struct {

        public const int MAX_LENGTH = #MAX_LENGTH#;
        public A#MAX_LENGTH#<T> arr;
        
        private int length;
        
        [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
        public StackArray(int length) {
            
            this.arr = new A#MAX_LENGTH#<T>();
            this.length = (length > StackArray<T>.MAX_LENGTH ? StackArray<T>.MAX_LENGTH : length);

        }

        public void Resize(int newLength) {
    
            this.length = (newLength > #MAX_LENGTH# ? #MAX_LENGTH# : newLength);
    
        }
        
        public int Length {
            [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
            get {
                return this.length;
            }
        }

        object IStackArray.this[int index] {
            get {
                return this[index];
            }
            set {
                this[index] = (T)value;
            }
        }

        public T this[int index] {
            [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
            get {
                return H.R<T, A#MAX_LENGTH#<T>>(ref this.arr, index);
            }
            [MethodImplAttribute(MethodImplOptions.AggressiveInlining)]
            set {
                H.W(ref this.arr, index, value);
            }
        }

    }
    
    #pragma warning restore

}