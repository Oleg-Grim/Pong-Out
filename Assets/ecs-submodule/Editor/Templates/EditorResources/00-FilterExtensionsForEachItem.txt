internal static class Jobs#FORMS#<#ITEMS_TYPE#> #ITEMS_WHERE# {
    
    [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
    public unsafe struct Job : IJob {

        [NativeDisableUnsafePtrRestriction]
        public System.IntPtr fn;
        public FunctionPointer<ForEachUtils.InternalDelegate> func;
        public FilterBag<#ITEMS_TYPE#> bag;

        public void Execute() {
            var ptr = UnsafeUtility.AddressOf(ref this.bag);
            this.func.Invoke((void*)this.fn, ptr);
            UnsafeUtility.CopyPtrToStructure(ptr, out this.bag);
        }
    
        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        public static void Run(void* fn, void* bagPtr) {
            UnsafeUtility.CopyPtrToStructure(bagPtr, out FilterBag<#ITEMS_TYPE#> bag);
            var del = new FunctionPointer<ME.ECS.Filters.FD#FORMS#<#ITEMS_TYPE#>>((System.IntPtr)fn);
            for (int i = 0; i < bag.Length; ++i) {
                del.Invoke(in bag.GetEntity(i), #ITEMS_GET#);
            }
            UnsafeUtility.CopyStructureToPtr(ref bag, bagPtr);
        }

    }

}

public static unsafe ForEachUtils.ForEachTask<ME.ECS.Filters.FD#FORMS#<#ITEMS_TYPE#>> ForEach<#ITEMS_TYPE#>(this in Filter filter, ME.ECS.Filters.FD#FORMS#<#ITEMS_TYPE#> onEach) #ITEMS_WHERE# {
    
    return new ForEachUtils.ForEachTask<ME.ECS.Filters.FD#FORMS#<#ITEMS_TYPE#>>(in filter, onEach, (in ForEachUtils.ForEachTask<ME.ECS.Filters.FD#FORMS#<#ITEMS_TYPE#>> task, in Filter filterInternal, ME.ECS.Filters.FD#FORMS#<#ITEMS_TYPE#> onEachInternal) => {

        if (task.withBurst == true) {

            var bag = new FilterBag<#ITEMS_TYPE#>(filterInternal, Unity.Collections.Allocator.TempJob);
            var handle = GCHandle.Alloc(onEachInternal);
            var job = new Jobs#FORMS#<#ITEMS_TYPE#>.Job() {
                fn = Marshal.GetFunctionPointerForDelegate(onEachInternal),
                func = BurstCompiler.CompileFunctionPointer<ForEachUtils.InternalDelegate>(Jobs#FORMS#<#ITEMS_TYPE#>.Job.Run),
                bag = bag,
            };
            job.Schedule().Complete();
            handle.Free();
            bag.Push();

        } else {

            var bag = new FilterBag<#ITEMS_TYPE#>(filterInternal, Unity.Collections.Allocator.Persistent);
            for (int i = 0; i < bag.Length; ++i) onEachInternal.Invoke(in bag.GetEntity(i), #ITEMS_GET#);
            bag.Push();

        }

    });
    
}
