using ME.ECS;
using Unity.Jobs;
using Unity.Burst;

namespace #NAMESPACE# {

    #pragma warning disable
    using ProjectX.Components; using ProjectX.Modules; using ProjectX.Systems; using ProjectX.Markers;
    using Components; using Modules; using Systems; using Markers;
    #pragma warning restore
    
    using Bag = ME.ECS.Buffers.FilterBag<YOUR, COMPONENTS, HERE>;
    
    #if ECS_COMPILE_IL2CPP_OPTIONS
    [Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
     Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
     Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
    #endif
    public sealed class #SCRIPTNAME# : ISystem, IAdvanceTick {
        
        private Filter filter;

        public World world { get; set; }
        
        void ISystemBase.OnConstruct() {
            
            Filter.Create("BurstFilter-#SCRIPTNAME#")
                  .Push(ref this.filter);
            
        }
        
        void ISystemBase.OnDeconstruct() {}

        [BurstCompile(FloatPrecision.High, FloatMode.Deterministic, CompileSynchronously = true)]
        private struct BurstJob : IJob {

            public Bag bag;
            public float deltaTime;
            
            public void Execute() {
                
                // Your code goes here
                
            }

        }
        
        void IAdvanceTick.AdvanceTick(in float deltaTime) {

            var bag = new Bag(this.filter, Unity.Collections.Allocator.Temp);
            new BurstJob() {
                deltaTime = deltaTime,
                bag = bag,
            }.Schedule().Complete();
            bag.Push();

        }
        
    }
    
}