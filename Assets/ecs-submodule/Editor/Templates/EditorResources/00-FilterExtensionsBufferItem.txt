[System.Runtime.InteropServices.StructLayoutAttribute(System.Runtime.InteropServices.LayoutKind.Sequential)]
public struct DataBufferStruct<#ITEMS_TYPE#> {
    #DATABUFFER_CONTAINS#
    #DATABUFFER_OPS#
    public byte entityOps;
    public Entity entity;
    #DATABUFFER_DATA#
}

#if ECS_COMPILE_IL2CPP_OPTIONS
[Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.NullChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.ArrayBoundsChecks, false),
 Unity.IL2CPP.CompilerServices.Il2CppSetOptionAttribute(Unity.IL2CPP.CompilerServices.Option.DivideByZeroChecks, false)]
#endif
public struct FilterBag<#ITEMS_TYPE#> #ITEMS_WHERE# {

    public readonly int Length;
    [Unity.Collections.NativeDisableParallelForRestriction] private Unity.Collections.NativeArray<DataBufferStruct<#ITEMS_TYPE#>> arr;
    
    [Unity.Burst.BurstCompileAttribute(Unity.Burst.FloatPrecision.Low, Unity.Burst.FloatMode.Fast, CompileSynchronously = true)]
    private struct Job : Unity.Jobs.IJobParallelFor {

        [Unity.Collections.NativeDisableParallelForRestriction]
        public Unity.Collections.NativeList<Entity> buffer;
        public int offset;
        #JOB_FILL_ITEMS#
        public Unity.Collections.NativeArray<DataBufferStruct<#ITEMS_TYPE#>> arr;

        public void Execute(int index) {

            var entity = this.buffer[index];
            this.arr[index] = new DataBufferStruct<#ITEMS_TYPE#>() {
                entity = entity,
                #REGS_FILL#
            };
            
        }

    }
    
    public FilterBag(Filter filter, Unity.Collections.Allocator allocator) {
        this.Length = filter.Count;
        if (this.Length == 0) {
            this.arr = default;
            return;
        }
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Create");
        #endif
        var world = filter.world;
        var filterArr = filter.ToList(allocator, out var min, out var max);
        var size = max - min + 1;
        if (size < 0) size = 0;
        #REGS_INIT#
        this.arr = new Unity.Collections.NativeArray<DataBufferStruct<#ITEMS_TYPE#>>(this.Length, allocator);
        new Job() {
            buffer = filterArr,
            offset = min,
            #JOB_INIT_ITEMS#
            arr = this.arr,
        }.Schedule(filterArr.Length, 64).Complete();
        filterArr.Dispose();
        #REGS_DISPOSE#
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }

    public void Push() {
        if (this.Length == 0) return;
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.BeginSample("Push");
        #endif
        var world = Worlds.currentWorld;
        var changedCount = 0;
        #PUSH_REGS_INIT#
        for (int i = 0; i < this.Length; ++i) {
            ref readonly var data = ref this.arr.GetRefRead(i);
            if (data.entityOps == 0x1) {
                world.RemoveEntity(in data.entity);
            } else {
                #PUSH_OPS#
            }
        }
        //if (changedCount > 0) world.UpdateAllFilters();
        this.Dispose();
        #if UNITY_EDITOR
        UnityEngine.Profiling.Profiler.EndSample();
        #endif
    }
    
    public void DestroyEntity(int index) => this.arr.GetRef(index).entityOps = 0x1;
    
    public int GetEntityId(int index) => this.arr[index].entity.id;

    public ref readonly Entity GetEntity(int index) => ref this.arr.GetRefRead(index).entity;

    public void Revert() => this.Dispose();

    private void Dispose() {
        if (this.Length == 0) return;
        this.arr.Dispose();
    }

    #region API
    #ITEMS_METHODS#
    #endregion

}
